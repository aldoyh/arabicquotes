<?php
require_once 'inc/db-utils.php';

error_reporting(E_ALL);
error_log("Current directory: " . __DIR__);

/**
 * Class QuoteManager
 * Handles quote operations including fetching, updating, and formatting.
 */
class QuoteManager
{
    private $dbFile;
    private $basePath;
    
    public function __construct($dbFile = 'quotes.db')
    {
        $this->dbFile = $dbFile;
        $this->basePath = __DIR__ . '/';
    }

    /**
     * Gets a random quote from the database.
     * @return array|null The quote data or null on error.
     */
    public function getRandomQuote()
    {
        try {
            $db = new SQLite3($this->dbFile);
            $result = $db->query("SELECT * FROM quotes ORDER BY RANDOM() LIMIT 1");
            if (!$result) {
                throw new Exception("Failed to query quotes from DB");
            }
            $quote = $result->fetchArray(SQLITE3_ASSOC);
            $db->close();
            return $quote;
        } catch (Exception $e) {
            error_log("Error in getRandomQuote: " . $e->getMessage());
            return null;
        }
    }

    /**
     * Logs quote updates to a deployment log file.
     * @param string $logMessage Message to log.
     * @return bool True if successful, false otherwise.
     */
    public function logQuoteUpdate($logMessage)
    {
        try {
            $logEntry = date('Y-m-d H:i:s') . " - " . $logMessage . "\n";
            if (file_put_contents($this->basePath . "assets/DEPLOYMENT.log", $logEntry, FILE_APPEND) === false) {
                throw new Exception("Failed to write to log file");
            }
            return true;
        } catch (Exception $e) {
            error_log("Error in logQuoteUpdate: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Updates the README with a new random quote.
     * @return array|null The updated quote or null on error.
     */
    public function updateReadme()
    {
        try {
            $selectedQuote = $this->getRandomQuote();
            if (!$selectedQuote) {
                throw new Exception('Failed to get random quote');
            }

            $selectedQuote['hits']++;

            $readmePath = $this->basePath . "README.md";
            if (!file_exists($readmePath)) {
                throw new Exception('README.md not found');
            }

            $readmeContent = file_get_contents($readmePath);
            if ($readmeContent === false) {
                throw new Exception('Failed to read README.md');
            }

            $quoteMarkdown = $this->generateQuoteMarkdown($selectedQuote);
            if (!$quoteMarkdown) {
                throw new Exception('Failed to generate quote markdown');
            }

            if (file_put_contents($readmePath, $quoteMarkdown) === false) {
                throw new Exception('Failed to write to README.md');
            }

            return $selectedQuote;
        } catch (Exception $e) {
            error_log("Error in updateReadme: " . $e->getMessage());
            return null;
        }
    }

    /**
     * Generates Markdown representation of a quote.
     * @param array $quote The quote data.
     * @return string The Markdown representation of the quote.
     */
    public function generateQuoteMarkdown($quote)
    {
        $quoteMarkdown = PHP_EOL . "# " . $quote['quote'] . PHP_EOL . PHP_EOL . "- " . $quote['author'] . PHP_EOL . PHP_EOL;
        if (isset($quote['image'])) {
            $quoteMarkdown .= "![" . $quote['author'] . "](" . $quote['image'] . ")" . PHP_EOL . PHP_EOL;
        }
        return $quoteMarkdown;
    }

    /**
     * Generates HTML representation of a quote.
     * @param array $quote The quote data.
     * @return string The HTML representation of the quote.
     */
    public function generateQuoteHtml($quote)
    {
        $html = '<div class="quote-wrapper" style="text-align: center; font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;">
                    <div class="quote-text" style="font-size: 24px; color: #333; margin-bottom: 10px;">
                        ' . htmlspecialchars($quote['quote']) . '
                    </div>
                    <div class="quote-author" style="font-size: 18px; color: #666;">
                        - ' . htmlspecialchars($quote['author']) . '
                    </div>
                    <div class="quote-meta" style="margin-top: 20px; color: #999;">
                        <p class="quote-date" style="font-size: smaller;">Ø§Ù„ÙŠÙˆÙ…: ' . date('l jS \of F Y - H:i') . ' ðŸŽ¯ Ø§Ù„Ù…Ø´Ø§Ù‡Ø¯Ø§Øª: ' . $quote['hits'] . '</p>
                    </div>
                </div>';
        return $html;
    }
}

/**
 * Class WikiquoteFetcher
 * Handles fetching quotes from Wikiquote.
 */
class WikiquoteFetcher
{
    private $maxRetries = 3;
    private $timeout = 10;
    
    public function __construct($maxRetries = 3, $timeout = 10)
    {
        $this->maxRetries = $maxRetries;
        $this->timeout = $timeout;
    }

    /**
     * Fetches a random quote from Wikiquote.
     * @return array|null The quote data or null on error.
     */
    public function fetchRandomWikiQuote()
    {
        $htmlChunk = $this->fetchFromWiki();
        if (!$htmlChunk) {
            return null;
        }

        // ... Process the HTML chunk and return quote data
        return [
            'quote' => 'Sample quote',
            'author' => 'Sample author'
        ];
    }

    /**
     * Fetches content from Wikiquote.
     * @return string|null The HTML content or null on error.
     */
    private function fetchFromWiki()
    {
        $html = $this->fetchRaw();
        if (!$html) {
            error_log("Failed to fetch raw HTML from Wikiquote");
            return null;
        }

        $dom = new DOMDocument();
        @$dom->loadHTML($html);
        $xpath = new DOMXPath($dom);
        $quoteNodes = $xpath->query("//div[@class='quote']");

        if ($quoteNodes->length === 0) {
            error_log("No quotes found in the HTML");
            return null;
        }

        return $html;
    }

    /**
     * Fetches raw content from a URL with retry mechanism.
     * @return string|null The raw content or null on error.
     */
    private function fetchRaw()
    {
        $url = "https://ar.wikiquote.org/wiki/%D8%A7%D9%84%D8%B5%D9%81%D8%AD%D8%A9_%D8%A7%D9%84%D8%B1%D8%A6%D9%8A%D8%B3%D9%8A%D8%A9";
        $context = stream_context_create([
            'http' => [
                'timeout' => $this->timeout
            ]
        ]);
        
        for ($attempt = 1; $attempt <= $this->maxRetries; $attempt++) {
            try {
                $html = @file_get_contents($url, false, $context);
                if ($html !== false) {
                    return $html;
                }
                if ($attempt < $this->maxRetries) {
                    sleep(1);
                }
            } catch (Exception $e) {
                error_log("Attempt $attempt failed: " . $e->getMessage());
                if ($attempt === $this->maxRetries) {
                    throw $e;
                }
            }
        }
        return null;
    }
}